/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'America/Anchorage'
  | 'Pacific/Gambier'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Brisbane'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  blocks: {
    accordionItem: AccordionItem;
    appreciation: Appreciation;
    articleBody: ArticleBody;
    articlesBody: ArticlesBody;
    authorBioBox: AuthorBioBox;
    banner: Banner;
    bookDemoMain: BookDemoMain;
    button: Button;
    clientLogotypes: ClientLogotypes;
    clientLogotypesCards: ClientLogotypesCards;
    compareTable: CompareTable;
    compareTableIconCell: CompareTableIconCell;
    compareTableRow: CompareTableRow;
    compareTableSubtable: CompareTableSubtable;
    compareTableTextCell: CompareTableTextCell;
    comparisonFeatureRow: ComparisonFeatureRow;
    cta: Cta;
    ctaForm: CtaForm;
    ctaSmall: CtaSmall;
    customComponent: CustomComponent;
    customersBody: CustomersBody;
    customersSection: CustomersSection;
    customersSideBar: CustomersSideBar;
    demo: Demo;
    demos: Demos;
    dropdownOption: DropdownOption;
    dropdownWithCategories: DropdownWithCategories;
    dropdownWithoutCategories: DropdownWithoutCategories;
    embedded: Embedded;
    embededMap: EmbededMap;
    eventPage: EventPage;
    eventsBody: EventsBody;
    featureArticle: FeatureArticle;
    featureBlock: FeatureBlock;
    featureGuide: FeatureGuide;
    featureIntegration: FeatureIntegration;
    featureReport: FeatureReport;
    features: Features;
    filterBar: FilterBar;
    footerItem: FooterItem;
    footerLinksGroup: FooterLinksGroup;
    footerTitleItem: FooterTitleItem;
    form: Form;
    formCheckbox: FormCheckbox;
    formDropdown: FormDropdown;
    formInput: FormInput;
    formSubtitle: FormSubtitle;
    formTitle: FormTitle;
    globalButtons: GlobalButtons;
    globalClientLogotypes: GlobalClientLogotypes;
    globalCTA: GlobalCTA;
    globalInfoAccordion: GlobalInfoAccordion;
    globalInfoCarousel: GlobalInfoCarousel;
    globalInfoGrid: GlobalInfoGrid;
    globalInfoTabVariant: GlobalInfoTabVariant;
    globalInfoTextWithImage: GlobalInfoTextWithImage;
    globalInfoWithCardsSection: GlobalInfoWithCardsSection;
    globalReviewsSection: GlobalReviewsSection;
    globalTagBody: GlobalTagBody;
    grid: Grid;
    gridCard: GridCard;
    guidesBody: GuidesBody;
    heroArticle: HeroArticle;
    heroSubpages: HeroSubpages;
    heroSubpagesCentered: HeroSubpagesCentered;
    heroTemplate: HeroTemplate;
    homeHero: HomeHero;
    iconButton: IconButton;
    infoAccordion: InfoAccordion;
    infoBottomTab: InfoBottomTab;
    infoCard: InfoCard;
    infoCarousel: InfoCarousel;
    infoCarouselSlide: InfoCarouselSlide;
    infoCarouselSlideItem: InfoCarouselSlideItem;
    infoGrid: InfoGrid;
    infoGridCardsWithIcons: InfoGridCardsWithIcons;
    infoGridItem: InfoGridItem;
    infoGridTwoColumnsWithTitle: InfoGridTwoColumnsWithTitle;
    infoGridTwoColumnsWithTitleItem: InfoGridTwoColumnsWithTitleItem;
    infoGridWithHeading: InfoGridWithHeading;
    infoGridWithResources: InfoGridWithResources;
    infoIconTab: InfoIconTab;
    infoQuote: InfoQuote;
    infoSlide: InfoSlide;
    infoSlider: InfoSlider;
    infoSliderTimeline: InfoSliderTimeline;
    infoTab: InfoTab;
    infoTabsWithDescriptions: InfoTabsWithDescriptions;
    infoTabsWithIcon: InfoTabsWithIcon;
    infoText: InfoText;
    infoTextWithCollage: InfoTextWithCollage;
    infoTextWithImage: InfoTextWithImage;
    infoTip: InfoTip;
    infoWithCards: InfoWithCards;
    inlineCTA: InlineCTA;
    insightComparison: InsightComparison;
    integrationsBody: IntegrationsBody;
    liveEvent: LiveEvent;
    livestormEmbed: LivestormEmbed;
    liveWebsiteTestingCapture: LiveWebsiteTestingCapture;
    liveWebsiteTestingHero: LiveWebsiteTestingHero;
    liveWebsiteTestingPanel: LiveWebsiteTestingPanel;
    liveWebsiteTestingSites: LiveWebsiteTestingSites;
    liveWebsiteTestingTasks: LiveWebsiteTestingTasks;
    mainHero: MainHero;
    media: Media;
    mediaCollage: MediaCollage;
    navBarCategoryLink: NavBarCategoryLink;
    navBarGroup: NavBarGroup;
    navBarLink: NavBarLink;
    ogImage: OgImage;
    pagination: Pagination;
    platform: Platform;
    pricingBodyTable: PricingBodyTable;
    pricingBodyTableIconCell: PricingBodyTableIconCell;
    pricingBodyTableRow: PricingBodyTableRow;
    pricingBodyTableTextCell: PricingBodyTableTextCell;
    pricingPlan: PricingPlan;
    pricingPlanItem: PricingPlanItem;
    pricingPlanListItem: PricingPlanListItem;
    pricingTable: PricingTable;
    pricingTableComparison: PricingTableComparison;
    pricing–°omparisonFeaturesRow: PricingOmparisonFeaturesRow;
    reportsBody: ReportsBody;
    resourcesHero: ResourcesHero;
    review: Review;
    reviews: Reviews;
    richText: RichText;
    richTitleGradientSegment: RichTitleGradientSegment;
    richTitleSegment: RichTitleSegment;
    richTitleUsersSegment: RichTitleUsersSegment;
    sideBarCtaBlock: SideBarCtaBlock;
    singleReview: SingleReview;
    socialMedia: SocialMedia;
    suggestedArticles: SuggestedArticles;
    suggestedTemplates: SuggestedTemplates;
    table: Table;
    tableOfContent: TableOfContent;
    tableRichText: TableRichText;
    tableRichTextCell: TableRichTextCell;
    tableRichTextRow: TableRichTextRow;
    templateCTA: TemplateCTA;
    templateInfoAccordion: TemplateInfoAccordion;
    templateInfoGridColumn: TemplateInfoGridColumn;
    templateInfoGridThreeColumns: TemplateInfoGridThreeColumns;
    templateMedia: TemplateMedia;
    templatesBody: TemplatesBody;
    templatesCTA: TemplatesCTA;
    templateSection: TemplateSection;
    templatesFilterBar: TemplatesFilterBar;
    templatesSection: TemplatesSection;
    textBlock: TextBlock;
    textLink: TextLink;
    textLinkButton: TextLinkButton;
    textLinks: TextLinks;
    textLinkWithIcon: TextLinkWithIcon;
    timelineSlide: TimelineSlide;
    toggle: Toggle;
    videosBody: VideosBody;
  };
  collections: {
    article: Article;
    articleCategory: ArticleCategory;
    author: Author;
    callToAction: CallToAction;
    clientLogotype: ClientLogotype;
    compare: Compare;
    customer: Customer;
    customerCompanySize: CustomerCompanySize;
    customerIndustry: CustomerIndustry;
    customerRegion: CustomerRegion;
    customersMainPage: CustomersMainPage;
    customerUseCase: CustomerUseCase;
    event: Event;
    feature: Feature;
    footer: Footer;
    globalButton: GlobalButton;
    globalInfoAccordions: GlobalInfoAccordion1;
    globalInfoCarousels: GlobalInfoCarousel1;
    globalInfoGrids: GlobalInfoGrid1;
    globalInfoTabs: GlobalInfoTab;
    globalInfoTextWithImages: GlobalInfoTextWithImage1;
    globalInfoWithCards: GlobalInfoWithCard;
    globalReviews: GlobalReview;
    globalTag: GlobalTag;
    guide: Guide;
    guideMainInfo: GuideMainInfo;
    integration: Integration;
    integrationMainInfo: IntegrationMainInfo;
    landingPage: LandingPage;
    legalPage: LegalPage;
    navigationBar: NavigationBar;
    navigationBarMenuItems: NavigationBarMenuItem;
    page: Page;
    pricingUseCase: PricingUseCase;
    rating: Rating;
    report: Report;
    solution: Solution;
    template: Template;
    templateIndustry: TemplateIndustry;
    templateMethodology: TemplateMethodology;
    templateTeam: TemplateTeam;
    templateUseCase: TemplateUseCase;
    'testimonial-reviewer': TestimonialReviewer;
    video: Video;
    users: User;
    assets: Asset;
    'test-pages': TestPage;
    releases: Release;
    redirects: Redirect;
    search: Search;
    'payload-folders': FolderInterface;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    'test-pages': {
      release: 'releases';
    };
    'payload-folders': {
      documentsAndFolders: 'payload-folders' | 'assets';
    };
  };
  collectionsSelect: {
    article: ArticleSelect<false> | ArticleSelect<true>;
    articleCategory: ArticleCategorySelect<false> | ArticleCategorySelect<true>;
    author: AuthorSelect<false> | AuthorSelect<true>;
    callToAction: CallToActionSelect<false> | CallToActionSelect<true>;
    clientLogotype: ClientLogotypeSelect<false> | ClientLogotypeSelect<true>;
    compare: CompareSelect<false> | CompareSelect<true>;
    customer: CustomerSelect<false> | CustomerSelect<true>;
    customerCompanySize: CustomerCompanySizeSelect<false> | CustomerCompanySizeSelect<true>;
    customerIndustry: CustomerIndustrySelect<false> | CustomerIndustrySelect<true>;
    customerRegion: CustomerRegionSelect<false> | CustomerRegionSelect<true>;
    customersMainPage: CustomersMainPageSelect<false> | CustomersMainPageSelect<true>;
    customerUseCase: CustomerUseCaseSelect<false> | CustomerUseCaseSelect<true>;
    event: EventSelect<false> | EventSelect<true>;
    feature: FeatureSelect<false> | FeatureSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    globalButton: GlobalButtonSelect<false> | GlobalButtonSelect<true>;
    globalInfoAccordions: GlobalInfoAccordionsSelect<false> | GlobalInfoAccordionsSelect<true>;
    globalInfoCarousels: GlobalInfoCarouselsSelect<false> | GlobalInfoCarouselsSelect<true>;
    globalInfoGrids: GlobalInfoGridsSelect<false> | GlobalInfoGridsSelect<true>;
    globalInfoTabs: GlobalInfoTabsSelect<false> | GlobalInfoTabsSelect<true>;
    globalInfoTextWithImages: GlobalInfoTextWithImagesSelect<false> | GlobalInfoTextWithImagesSelect<true>;
    globalInfoWithCards: GlobalInfoWithCardsSelect<false> | GlobalInfoWithCardsSelect<true>;
    globalReviews: GlobalReviewsSelect<false> | GlobalReviewsSelect<true>;
    globalTag: GlobalTagSelect<false> | GlobalTagSelect<true>;
    guide: GuideSelect<false> | GuideSelect<true>;
    guideMainInfo: GuideMainInfoSelect<false> | GuideMainInfoSelect<true>;
    integration: IntegrationSelect<false> | IntegrationSelect<true>;
    integrationMainInfo: IntegrationMainInfoSelect<false> | IntegrationMainInfoSelect<true>;
    landingPage: LandingPageSelect<false> | LandingPageSelect<true>;
    legalPage: LegalPageSelect<false> | LegalPageSelect<true>;
    navigationBar: NavigationBarSelect<false> | NavigationBarSelect<true>;
    navigationBarMenuItems: NavigationBarMenuItemsSelect<false> | NavigationBarMenuItemsSelect<true>;
    page: PageSelect<false> | PageSelect<true>;
    pricingUseCase: PricingUseCaseSelect<false> | PricingUseCaseSelect<true>;
    rating: RatingSelect<false> | RatingSelect<true>;
    report: ReportSelect<false> | ReportSelect<true>;
    solution: SolutionSelect<false> | SolutionSelect<true>;
    template: TemplateSelect<false> | TemplateSelect<true>;
    templateIndustry: TemplateIndustrySelect<false> | TemplateIndustrySelect<true>;
    templateMethodology: TemplateMethodologySelect<false> | TemplateMethodologySelect<true>;
    templateTeam: TemplateTeamSelect<false> | TemplateTeamSelect<true>;
    templateUseCase: TemplateUseCaseSelect<false> | TemplateUseCaseSelect<true>;
    'testimonial-reviewer': TestimonialReviewerSelect<false> | TestimonialReviewerSelect<true>;
    video: VideoSelect<false> | VideoSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    assets: AssetsSelect<false> | AssetsSelect<true>;
    'test-pages': TestPagesSelect<false> | TestPagesSelect<true>;
    releases: ReleasesSelect<false> | ReleasesSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    'payload-folders': PayloadFoldersSelect<false> | PayloadFoldersSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {
    blogMainPage: BlogMainPage;
    errorPage: ErrorPage;
    eventsMainPage: EventsMainPage;
    favicon: Favicon;
    guidesMainPage: GuidesMainPage;
    integrationsMainPage: IntegrationsMainPage;
    notFoundPage: NotFoundPage;
    pricingMainPage: PricingMainPage;
    reportsMainPage: ReportsMainPage;
    templatesMainPage: TemplatesMainPage;
    videosMainPage: VideosMainPage;
    settings: Setting;
  };
  globalsSelect: {
    blogMainPage: BlogMainPageSelect<false> | BlogMainPageSelect<true>;
    errorPage: ErrorPageSelect<false> | ErrorPageSelect<true>;
    eventsMainPage: EventsMainPageSelect<false> | EventsMainPageSelect<true>;
    favicon: FaviconSelect<false> | FaviconSelect<true>;
    guidesMainPage: GuidesMainPageSelect<false> | GuidesMainPageSelect<true>;
    integrationsMainPage: IntegrationsMainPageSelect<false> | IntegrationsMainPageSelect<true>;
    notFoundPage: NotFoundPageSelect<false> | NotFoundPageSelect<true>;
    pricingMainPage: PricingMainPageSelect<false> | PricingMainPageSelect<true>;
    reportsMainPage: ReportsMainPageSelect<false> | ReportsMainPageSelect<true>;
    templatesMainPage: TemplatesMainPageSelect<false> | TemplatesMainPageSelect<true>;
    videosMainPage: VideosMainPageSelect<false> | VideosMainPageSelect<true>;
    settings: SettingsSelect<false> | SettingsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "accordionItem".
 */
export interface AccordionItem {
  title: string;
  description: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'accordionItem';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "appreciation".
 */
export interface Appreciation {
  review?: {
    relationTo: 'globalReviews';
    value: string | GlobalReview;
  } | null;
  /**
   * This field displays as a table editor. Since Payload v3.47 doesn't include a dedicated table field type, we've configured a rich text field to only allow table content as a workaround. To create the table you will need to type "/table" in the editor.
   */
  stats?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'appreciation';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalReviews".
 */
export interface GlobalReview {
  id: string;
  reviewBlock: (Reviews | SingleReview)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reviews".
 */
export interface Reviews {
  backgroundColor?: ('bg-green-02' | 'bg-pink-01') | null;
  'Review Components': Review[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'reviews';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "review".
 */
export interface Review {
  text: string;
  tag?: string | null;
  representative: {
    relationTo: 'testimonial-reviewer';
    value: string | TestimonialReviewer;
  };
  image: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'review';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonial-reviewer".
 */
export interface TestimonialReviewer {
  id: string;
  fullName: string;
  position: string;
  companyLogo?: (string | null) | Asset;
  companyLogoOnLight?: (string | null) | Asset;
  avatar?: (string | null) | Asset;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assets".
 */
export interface Asset {
  id: string;
  alt: string;
  folder?: (string | null) | FolderInterface;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-folders".
 */
export interface FolderInterface {
  id: string;
  name: string;
  folder?: (string | null) | FolderInterface;
  documentsAndFolders?: {
    docs?: (
      | {
          relationTo?: 'payload-folders';
          value: string | FolderInterface;
        }
      | {
          relationTo?: 'assets';
          value: string | Asset;
        }
    )[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "singleReview".
 */
export interface SingleReview {
  text: string;
  tag?: string | null;
  backgroundColor: 'bg-green-02' | 'bg-pink-02' | 'bg-green-04';
  imagePosition: 'left' | 'right';
  representative: {
    relationTo: 'testimonial-reviewer';
    value: string | TestimonialReviewer;
  };
  image: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'singleReview';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "articleBody".
 */
export interface ArticleBody {
  sideBar: TableOfContent[];
  body: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'articleBody';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tableOfContent".
 */
export interface TableOfContent {
  shareTitle: string;
  /**
   * The kind of content being shared (eg. article)
   */
  contentType?: ('article' | 'video' | 'guide' | 'template' | 'integration' | 'event') | null;
  copiedTitle: string;
  shareLinkedin?: boolean | null;
  shareFacebook?: boolean | null;
  shareTwitter?: boolean | null;
  shareEmail?: boolean | null;
  copyLink?: boolean | null;
  embed?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'tableOfContent';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "articlesBody".
 */
export interface ArticlesBody {
  'Show Label'?: boolean | null;
  'Show Date'?: boolean | null;
  'Show Read Time'?: boolean | null;
  'Show Author'?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'articlesBody';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "authorBioBox".
 */
export interface AuthorBioBox {
  author?: {
    relationTo: 'author';
    value: string | Author;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'authorBioBox';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "author".
 */
export interface Author {
  id: string;
  name: string;
  position: string;
  image: string | Asset;
  description?: string | null;
  socialMediaLinks?: SocialMedia[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "socialMedia".
 */
export interface SocialMedia {
  icon: string | Asset;
  link: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'socialMedia';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "banner".
 */
export interface Banner {
  title: string;
  subtitle: string;
  backgroundColor:
    | 'bg-neutral-06'
    | 'bg-green-02'
    | 'bg-yellow-04'
    | 'bg-neutral-07'
    | 'bg-pink-01'
    | 'yellow-pink-gradient';
  /**
   * If you add a file here, the banner will use a second variant of design.
   */
  mainImage?: (string | null) | Asset;
  backgroundDesktop?: {
    leftTopImage?: (string | null) | Asset;
    rightTopImage?: (string | null) | Asset;
    leftBottomImage?: (string | null) | Asset;
    rightBottomImage?: (string | null) | Asset;
  };
  backgroundMobile?: {
    rightTopImageMobile?: (string | null) | Asset;
    leftBottomImageMobile?: (string | null) | Asset;
    rightBottomImageMobile?: (string | null) | Asset;
    leftTopImageMobile?: (string | null) | Asset;
  };
  button: (Button | GlobalButtons)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "button".
 */
export interface Button {
  label: string;
  /**
   * When you add value for \"Scroll To\" field, link will be overwrite.
   */
  link: string;
  buttonType: 'primary-m' | 'primary-s' | 'primary-width' | 'secondary-m' | 'secondary-width';
  backgroundColor: 'bg-green-02' | 'bg-neutral-07' | 'bg-transparent' | 'bg-neutral-01';
  /**
   * If the field is filled, an analytics event will sent to the segment.
   */
  eventName?: string | null;
  /**
   * You need add the same value which you add to block field \"Ref to scroll to\".
   */
  scrollTo?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'button';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalButtons".
 */
export interface GlobalButtons {
  button: {
    relationTo: 'globalButton';
    value: string | GlobalButton;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'globalButtons';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalButton".
 */
export interface GlobalButton {
  id: string;
  button: Button[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "bookDemoMain".
 */
export interface BookDemoMain {
  body?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  logos?: (string | Asset)[] | null;
  rating?: {
    relationTo: 'rating';
    value: string | Rating;
  } | null;
  embed?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'bookDemoMain';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rating".
 */
export interface Rating {
  id: string;
  rating?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clientLogotypes".
 */
export interface ClientLogotypes {
  subtitle?: string | null;
  /**
   * Defaults to left
   */
  subtitleAlignment?: ('left' | 'centre') | null;
  logos: (string | Asset)[];
  bottomDivider: '0' | '50';
  mobileBottomDivider?: boolean | null;
  marginTop: '80' | '0';
  backgroundColor: 'bg-yellow-04' | 'bg-neutral-07' | 'bg-green-02';
  id?: string | null;
  blockName?: string | null;
  blockType: 'clientLogotypes';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clientLogotypesCards".
 */
export interface ClientLogotypesCards {
  backgroundColor: 'bg-yellow-04' | 'bg-neutral-07' | 'bg-green-02';
  /**
   * Minimal images count - 8 Maximum images count - 18
   */
  images: (string | Asset)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'clientLogotypesCards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "compareTable".
 */
export interface CompareTable {
  headerRow?: CompareTableRow[] | null;
  subtables: CompareTableSubtable[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'compareTable';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "compareTableRow".
 */
export interface CompareTableRow {
  cells: (CompareTableIconCell | CompareTableTextCell)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'compareTableRow';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "compareTableIconCell".
 */
export interface CompareTableIconCell {
  type?: ('tick' | 'cross' | 'dash') | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'compareTableIconCell';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "compareTableTextCell".
 */
export interface CompareTableTextCell {
  label: string;
  tooltip?: {
    tooltipImage?: (string | null) | Asset;
    tooltipBody?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'compareTableTextCell';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "compareTableSubtable".
 */
export interface CompareTableSubtable {
  heading?: string | null;
  tableRows?: CompareTableRow[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'compareTableSubtable';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "comparisonFeatureRow".
 */
export interface ComparisonFeatureRow {
  title: string;
  monthlyPrice: string;
  'Annual Price': string;
  button: (Button | GlobalButtons)[];
  caption?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'comparisonFeatureRow';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "cta".
 */
export interface Cta {
  marginTop: '80' | '40' | '0';
  backgroundColor: 'bg-yellow-04' | 'bg-neutral-07' | 'bg-pink-01' | 'yellow-pink-gradient' | 'blue-pink-gradient';
  /**
   * Determines if this CTA should be within a contained block or bleed to the edges of the screen.
   */
  isContained?: boolean | null;
  title?: string | null;
  /**
   * If this field is populated then anything in title will be overridden.
   */
  richTitle?: (RichTitleGradientSegment | RichTitleSegment | RichTitleUsersSegment)[] | null;
  subtitle?: string | null;
  caption?: string | null;
  buttons: (Button | GlobalButtons)[];
  rating?: {
    relationTo: 'rating';
    value: string | Rating;
  } | null;
  leftAsset?: (string | null) | Asset;
  rightAsset?: (string | null) | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "richTitleGradientSegment".
 */
export interface RichTitleGradientSegment {
  content?: string | null;
  gradient?: ('blue' | 'pink') | null;
  gradientTopOffset?: number | null;
  gradientRightOffset?: number | null;
  gradientBottomOffset?: number | null;
  gradientLeftOffset?: number | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'richTitleGradientSegment';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "richTitleSegment".
 */
export interface RichTitleSegment {
  content?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'richTitleSegment';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "richTitleUsersSegment".
 */
export interface RichTitleUsersSegment {
  id?: string | null;
  blockName?: string | null;
  blockType: 'richTitleUsersSegment';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ctaForm".
 */
export interface CtaForm {
  title: string;
  subtitle: string;
  /**
   * You must select only image or Lottie JSON files.
   */
  asset: string | Asset;
  /**
   * The field uses for html element and must be without white spaces.
   */
  'Form ID'?: string | null;
  form?: (FormInput | FormDropdown | FormCheckbox)[] | null;
  button: {
    label: string;
    /**
     * The link overwriten with Form Input and Form ID fields
     */
    link?: string | null;
    buttonPosition?: ('bottom' | 'right') | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'ctaForm';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "formInput".
 */
export interface FormInput {
  /**
   * The field uses for html element and must be without white spaces.
   */
  'Field name': string;
  required?: boolean | null;
  autoComplete?: boolean | null;
  type: 'email' | 'date' | 'number' | 'tel' | 'text' | 'url';
  label?: string | null;
  placeholder: string;
  errorMessage: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formInput';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "formDropdown".
 */
export interface FormDropdown {
  /**
   * The field uses for html element and must be without white spaces.
   */
  name: string;
  required?: boolean | null;
  options: DropdownOption[];
  label?: string | null;
  placeholder: string;
  errorMessage: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formDropdown';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dropdownOption".
 */
export interface DropdownOption {
  name: string;
  value: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'dropdownOption';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "formCheckbox".
 */
export interface FormCheckbox {
  /**
   * The field uses for html element and must be without white spaces.
   */
  name: string;
  required?: boolean | null;
  label: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  errorMessage: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formCheckbox';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ctaSmall".
 */
export interface CtaSmall {
  button?: (Button | GlobalButtons)[] | null;
  /**
   * The field control top and bottom margin for mobile version.
   */
  mobileMargin: '0' | '20';
  /**
   * If you fill this field, button on click will be scroll to element, where you will add the same value.
   */
  scrollToElement?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'ctaSmall';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customComponent".
 */
export interface CustomComponent {
  backgroundColor: 'bg-neutral-06' | 'bg-neutral-07' | 'bg-yellow-04';
  content?:
    | (
        | LiveWebsiteTestingHero
        | LiveWebsiteTestingPanel
        | LiveWebsiteTestingSites
        | LiveWebsiteTestingTasks
        | LiveWebsiteTestingCapture
      )[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'customComponent';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liveWebsiteTestingHero".
 */
export interface LiveWebsiteTestingHero {
  id?: string | null;
  blockName?: string | null;
  blockType: 'liveWebsiteTestingHero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liveWebsiteTestingPanel".
 */
export interface LiveWebsiteTestingPanel {
  id?: string | null;
  blockName?: string | null;
  blockType: 'liveWebsiteTestingPanel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liveWebsiteTestingSites".
 */
export interface LiveWebsiteTestingSites {
  id?: string | null;
  blockName?: string | null;
  blockType: 'liveWebsiteTestingSites';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liveWebsiteTestingTasks".
 */
export interface LiveWebsiteTestingTasks {
  id?: string | null;
  blockName?: string | null;
  blockType: 'liveWebsiteTestingTasks';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liveWebsiteTestingCapture".
 */
export interface LiveWebsiteTestingCapture {
  id?: string | null;
  blockName?: string | null;
  blockType: 'liveWebsiteTestingCapture';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customersBody".
 */
export interface CustomersBody {
  buttonLabel: string;
  emptyListTitle: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'customersBody';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customersSection".
 */
export interface CustomersSection {
  sidebar: CustomersSideBar[];
  rightBlocks: (CustomersBody | Pagination)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'customersSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customersSideBar".
 */
export interface CustomersSideBar {
  showRegionFilter?: boolean | null;
  /**
   * Sort by
   */
  sortTitle: string;
  useCaseTitle: string;
  companySizeTitle: string;
  regionTitle: string;
  industryTitle: string;
  clearButtonLabel: string;
  mobileFilterButtonLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'customersSideBar';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pagination".
 */
export interface Pagination {
  nextPageButtonTitle: string;
  previousPageButtonTitle: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'pagination';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "demo".
 */
export interface Demo {
  title: string;
  body: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  /**
   * Can be Rive animations or images
   */
  media: string | Asset;
  /**
   * Duration the demo will be shown in milliseconds, not providing a value will assume an infinite duration
   */
  duration?: number | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'demo';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "demos".
 */
export interface Demos {
  demos?: Demo[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'demos';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dropdownWithCategories".
 */
export interface DropdownWithCategories {
  title: string;
  body: string;
  button?: {
    label?: string | null;
    link?: string | null;
    eventName?: string | null;
  };
  mainColumn: {
    mainColumnSubtitle: string;
    mainColumnLinks: NavBarCategoryLink[];
  };
  secondColumn?: {
    secondColumnLinks?: NavBarCategoryLink[] | null;
    secondColumnSubtitle?: string | null;
  };
  thirdColumn?: {
    thirdColumnSubtitle?: string | null;
    thirdColumnLinks?: NavBarCategoryLink[] | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'dropdownWithCategories';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navBarCategoryLink".
 */
export interface NavBarCategoryLink {
  title: string;
  link: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'navBarCategoryLink';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "dropdownWithoutCategories".
 */
export interface DropdownWithoutCategories {
  title: string;
  body: string;
  button?: {
    label?: string | null;
    link?: string | null;
    eventName?: string | null;
  };
  featureBlock?: {
    featureImage?: (string | null) | Asset;
    featureTitle?: string | null;
    featureBody?: string | null;
    featureButtonLabel?: string | null;
    featureLink?: string | null;
    featureBackgroundColor?:
      | ('bg-green-04' | 'bg-green-02' | 'bg-yellow-04' | 'bg-blue-04' | 'bg-neutral-06' | 'bg-purple-04/40')
      | null;
  };
  sublinks: NavBarLink[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'dropdownWithoutCategories';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navBarLink".
 */
export interface NavBarLink {
  title: string;
  subtitle: string;
  link: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'navBarLink';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "embedded".
 */
export interface Embedded {
  embedded: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'embedded';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "embededMap".
 */
export interface EmbededMap {
  address: string;
  icon?: (string | null) | Asset;
  /**
   * Property width and height for embeded element must be set to 100%
   */
  embed: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'embededMap';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "eventPage".
 */
export interface EventPage {
  'S E O': {
    followAndIndex?: boolean | null;
    title: string;
    description?: string | null;
  };
  ogImage?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  cover: string | Asset;
  globalTag?:
    | {
        relationTo: 'globalTag';
        value: string | GlobalTag;
      }[]
    | null;
  livestormEmbed: string;
  shareTitle: string;
  copiedTitle: string;
  shareFacebook?: boolean | null;
  shareTwitter?: boolean | null;
  shareLinkedin?: boolean | null;
  shareEmail?: boolean | null;
  copyLink?: boolean | null;
  cta: GlobalCTA[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'eventPage';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ogImage".
 */
export interface OgImage {
  title: string;
  description: string;
  /**
   * Fields 'publishedTime' and 'modifiedTime' available only for type and page Article. Field 'author' avaialble only for types Article and Book and for page Article.
   */
  type:
    | 'website'
    | 'article'
    | 'book'
    | 'profile'
    | 'music.song'
    | 'music.album'
    | 'music.playlist'
    | 'music.radio_station'
    | 'video.movie'
    | 'video.episode'
    | 'video.tv_show'
    | 'video.other';
  image: string | Asset;
  /**
   * You can use the field only with specific types and specific pages. The types, when the tag will be works - Article, Book, Video Movie, Video Episode The pages, where you can use the tag field - Templates, Video, Article, Guide
   */
  tag?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'ogImage';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigationBar".
 */
export interface NavigationBar {
  id: string;
  backgroundColor:
    | 'bg-neutral-07'
    | 'bg-neutral-06'
    | 'bg-neutral-05'
    | 'bg-green-04'
    | 'bg-green-02'
    | 'bg-yellow-04'
    | 'bg-yellow-01'
    | 'bg-pink-04'
    | 'bg-blue-05';
  buttons?: (Button | GlobalButtons)[] | null;
  logotype: string | Asset;
  searchHidden?: boolean | null;
  menuItems?: {
    relationTo: 'navigationBarMenuItems';
    value: string | NavigationBarMenuItem;
  } | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigationBarMenuItems".
 */
export interface NavigationBarMenuItem {
  id: string;
  logotypeLink: string;
  logoButtonLabel?: string | null;
  logoButtonLink?: string | null;
  search: {
    searchResultsTitle: string;
    emptySearchTitle: string;
    searchLengthValidationTitle: string;
    searchPlaceholder: string;
    searchGlobalTagContentType: string;
    searchFeatureContentType: string;
    searchCustomerMainPageContentType: string;
    searchCustomerContentType: string;
    searchSolutionContentType: string;
    searchPricingUseCaseContentType: string;
    searchPricingMainPageContentType: string;
    searchArticleContentType: string;
    searchBlogMainPageContentType: string;
    searchVideoContentType: string;
    searchVideoMainPageContentType: string;
    searchGuidesMainPageContentType: string;
    searchGuideMainPageContentType: string;
    searchTemplatesMainPageContentType: string;
    searchTemplateContentType: string;
    searchLegalPageContentType: string;
    searchLandingPageContentType: string;
    searchPageContentType: string;
    searchGuideMainInfoContentType: string;
  };
  'Menu Items'?: NavBarGroup[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navBarGroup".
 */
export interface NavBarGroup {
  menuLabel: string;
  /**
   * If group has the dropdown item, link must be empty.
   */
  link?: string | null;
  dropdown?: (DropdownWithCategories | DropdownWithoutCategories)[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'navBarGroup';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: string;
  logotype: string | Asset;
  groups?: FooterLinksGroup[] | null;
  socialMedia?: SocialMedia[] | null;
  imagePlaceholders?: (string | Asset)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footerLinksGroup".
 */
export interface FooterLinksGroup {
  title: string;
  links: (FooterItem | FooterTitleItem)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'footerLinksGroup';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footerItem".
 */
export interface FooterItem {
  body: string;
  tagLabel?: string | null;
  link: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'footerItem';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footerTitleItem".
 */
export interface FooterTitleItem {
  body: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'footerTitleItem';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalTag".
 */
export interface GlobalTag {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  globalTagTitle: string;
  /**
   * Any hero block must be on first place.
   */
  blocks: (
    | Pagination
    | GlobalCTA
    | GlobalTagBody
    | GlobalClientLogotypes
    | ResourcesHero
    | Cta
    | CtaForm
    | CtaSmall
    | ClientLogotypes
  )[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalCTA".
 */
export interface GlobalCTA {
  'Call To Action': {
    relationTo: 'callToAction';
    value: string | CallToAction;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'globalCTA';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "callToAction".
 */
export interface CallToAction {
  id: string;
  block?: (InlineCTA | TemplateCTA | TemplatesCTA | Cta | CtaForm | Banner | CtaSmall)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "inlineCTA".
 */
export interface InlineCTA {
  title: string;
  body?: string | null;
  backgroundColor: 'bg-green-03' | 'bg-green-04' | 'bg-pink-04' | 'bg-purple-04' | 'bg-yellow-03';
  button: (Button | GlobalButtons)[];
  image: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'inlineCTA';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateCTA".
 */
export interface TemplateCTA {
  title: string;
  'Author Body'?: string | null;
  shareTitle: string;
  copiedTitle: string;
  shareFacebook?: boolean | null;
  shareTwitter?: boolean | null;
  shareLinkedin?: boolean | null;
  shareEmail?: boolean | null;
  copyLink?: boolean | null;
  teamMember?: {
    relationTo: 'author';
    value: string | Author;
  } | null;
  button: (Button | GlobalButtons)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'templateCTA';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templatesCTA".
 */
export interface TemplatesCTA {
  title: string;
  image: string | Asset;
  button: (Button | GlobalButtons)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'templatesCTA';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalTagBody".
 */
export interface GlobalTagBody {
  videoLabel: string;
  videoButtonLabel: string;
  guideLabel: string;
  guideButtonLabel: string;
  articleLabel: string;
  articleBodyLabel: string;
  templateLabel: string;
  templateButtonLabel: string;
  customersLabel: string;
  customerStoryButtonLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'globalTagBody';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalClientLogotypes".
 */
export interface GlobalClientLogotypes {
  clientLogotypes: {
    relationTo: 'clientLogotype';
    value: string | ClientLogotype;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'globalClientLogotypes';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clientLogotype".
 */
export interface ClientLogotype {
  id: string;
  clientLogotypes: (ClientLogotypes | ClientLogotypesCards)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "resourcesHero".
 */
export interface ResourcesHero {
  title: string;
  button?: (Button | GlobalButtons)[] | null;
  subtitle: string;
  buttonSubtext?: string | null;
  backgroundColor: 'bg-neutral-06' | 'bg-green-04' | 'bg-blue-05';
  media: string | Asset;
  rating?: {
    relationTo: 'rating';
    value: string | Rating;
  } | null;
  isCentered?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'resourcesHero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "eventsBody".
 */
export interface EventsBody {
  title?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'eventsBody';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "featureArticle".
 */
export interface FeatureArticle {
  'Show Label'?: boolean | null;
  'Show Date'?: boolean | null;
  'Show Read Time'?: boolean | null;
  'Show Author'?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featureArticle';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "featureBlock".
 */
export interface FeatureBlock {
  title?: string | null;
  heading?: string | null;
  body?: string | null;
  integrations?: FeatureIntegration[] | null;
  link?: string | null;
  linkText?: string | null;
  image?: (string | null) | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featureBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "featureIntegration".
 */
export interface FeatureIntegration {
  icon?: (string | null) | Asset;
  link?: string | null;
  /**
   * Only used for screen readers
   */
  linkText?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featureIntegration';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "featureGuide".
 */
export interface FeatureGuide {
  buttonLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featureGuide';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "featureReport".
 */
export interface FeatureReport {
  buttonLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'featureReport';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "features".
 */
export interface Features {
  featureBlocks?: FeatureBlock[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'features';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "filterBar".
 */
export interface FilterBar {
  searchInputPlaceholder: string;
  emptyListTitle: string;
  resultLabel: string;
  allFilterLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'filterBar';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form".
 */
export interface Form {
  /**
   * The field uses for html element and must be without white spaces.
   */
  'Form ID': string;
  button: {
    buttonLabel: string;
  };
  alignment: 'row' | 'column';
  backgroundColor: 'bg-neutral-06' | 'transparent';
  padding: '0' | '40';
  header?: (FormTitle | FormSubtitle)[] | null;
  formElements: (FormInput | FormDropdown | FormCheckbox)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'form';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "formTitle".
 */
export interface FormTitle {
  title: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formTitle';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "formSubtitle".
 */
export interface FormSubtitle {
  subtitle: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'formSubtitle';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoAccordion".
 */
export interface GlobalInfoAccordion {
  infoAccordion: {
    relationTo: 'globalInfoAccordions';
    value: string | GlobalInfoAccordion1;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'globalInfoAccordion';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoAccordions".
 */
export interface GlobalInfoAccordion1 {
  id: string;
  infoAccordion: InfoAccordion[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoAccordion".
 */
export interface InfoAccordion {
  items: AccordionItem[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoAccordion';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoCarousel".
 */
export interface GlobalInfoCarousel {
  infoCarousel: {
    relationTo: 'globalInfoCarousels';
    value: string | GlobalInfoCarousel1;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'globalInfoCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoCarousels".
 */
export interface GlobalInfoCarousel1 {
  id: string;
  infoCarousel: InfoCarousel[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoCarousel".
 */
export interface InfoCarousel {
  slides?: InfoCarouselSlide[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoCarousel';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoCarouselSlide".
 */
export interface InfoCarouselSlide {
  image: string | Asset;
  backgroundColor:
    | 'bg-yellow-03'
    | 'bg-neutral-06'
    | 'bg-blue-04'
    | 'bg-pink-04'
    | 'bg-purple-04'
    | 'bg-red-05'
    | 'bg-pink-05'
    | 'bg-green-04'
    | 'bg-green-02'
    | 'bg-neutral-07';
  title: string;
  subtitle: string;
  items?: InfoCarouselSlideItem[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoCarouselSlide';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoCarouselSlideItem".
 */
export interface InfoCarouselSlideItem {
  title: string;
  icon: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoCarouselSlideItem';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoGrid".
 */
export interface GlobalInfoGrid {
  infoGrid: {
    relationTo: 'globalInfoGrids';
    value: string | GlobalInfoGrid1;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'globalInfoGrid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoGrids".
 */
export interface GlobalInfoGrid1 {
  id: string;
  grid: (InfoGrid | InfoGridCardsWithIcons | InfoGridTwoColumnsWithTitle)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoGrid".
 */
export interface InfoGrid {
  items: InfoGridItem[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoGrid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoGridItem".
 */
export interface InfoGridItem {
  title: string;
  subtitle?: string | null;
  icon: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoGridItem';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoGridCardsWithIcons".
 */
export interface InfoGridCardsWithIcons {
  backgroundColor: 'bg-green-04' | 'bg-green-02' | 'bg-yellow-04' | 'bg-blue-04' | 'bg-neutral-06' | 'bg-neutral-07';
  cards?: GridCard[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoGridCardsWithIcons';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "gridCard".
 */
export interface GridCard {
  title: string;
  body: string;
  fullWidthImage?: boolean | null;
  image: string | Asset;
  textLink?: TextLinkButton[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'gridCard';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "textLinkButton".
 */
export interface TextLinkButton {
  label: string;
  link: string;
  iconPosition: 'left' | 'right';
  eventName?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textLinkButton';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoGridTwoColumnsWithTitle".
 */
export interface InfoGridTwoColumnsWithTitle {
  backgroundColor:
    | 'bg-green-04'
    | 'bg-green-02'
    | 'bg-yellow-04'
    | 'bg-blue-04'
    | 'bg-neutral-06'
    | 'bg-neutral-01'
    | 'bg-neutral-07';
  title: string;
  subtitle?: string | null;
  image: string | Asset;
  items?: InfoGridTwoColumnsWithTitleItem[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoGridTwoColumnsWithTitle';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoGridTwoColumnsWithTitleItem".
 */
export interface InfoGridTwoColumnsWithTitleItem {
  icon?: (string | null) | Asset;
  title: string;
  body: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoGridTwoColumnsWithTitleItem';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoTabVariant".
 */
export interface GlobalInfoTabVariant {
  infoTab: {
    relationTo: 'globalInfoTabs';
    value: string | GlobalInfoTab;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'globalInfoTabVariant';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoTabs".
 */
export interface GlobalInfoTab {
  id: string;
  infoTabs: (InfoTabsWithDescriptions | InfoTabsWithIcon)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoTabsWithDescriptions".
 */
export interface InfoTabsWithDescriptions {
  title?: string | null;
  subtitle?: string | null;
  'Tab items': InfoTab[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoTabsWithDescriptions';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoTab".
 */
export interface InfoTab {
  title: string;
  description: string;
  image: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoTab';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoTabsWithIcon".
 */
export interface InfoTabsWithIcon {
  heading?: string | null;
  headingImage?: (string | null) | Asset;
  body?: string | null;
  backgroundColour?: ('bg-neutral-07' | 'bg-green-01') | null;
  /**
   * If this field is empty then individual tab images will be used, otherwise this image will be shown persistently.
   */
  tabImage?: (string | null) | Asset;
  'Tab Items': InfoIconTab[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoTabsWithIcon';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoIconTab".
 */
export interface InfoIconTab {
  icon?: (string | null) | Asset;
  title: string;
  image: string | Asset;
  link?: string | null;
  mobileButton: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoIconTab';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoTextWithImage".
 */
export interface GlobalInfoTextWithImage {
  infoTextWithImage: {
    relationTo: 'globalInfoTextWithImages';
    value: string | GlobalInfoTextWithImage1;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'globalInfoTextWithImage';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoTextWithImages".
 */
export interface GlobalInfoTextWithImage1 {
  id: string;
  infoTextWithImage: InfoTextWithImage[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoTextWithImage".
 */
export interface InfoTextWithImage {
  title: string;
  subtitle: string;
  /**
   * The value must be equal with \"Text link with icon\" component field
   */
  'Content Type'?: ('articles' | 'videos' | 'guides' | 'templates' | 'events' | 'reports') | null;
  backgroundColor: 'bg-neutral-06' | 'bg-neutral-07' | 'bg-yellow-04';
  imagePosition?: ('right' | 'left') | null;
  ''?: (string | null) | Asset;
  customComponent?:
    | (LiveWebsiteTestingHero | LiveWebsiteTestingPanel | LiveWebsiteTestingSites | LiveWebsiteTestingTasks)[]
    | null;
  textLink?: TextLinkButton[] | null;
  items?: InfoText[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoTextWithImage';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoText".
 */
export interface InfoText {
  text: string;
  icon: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoText';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoWithCardsSection".
 */
export interface GlobalInfoWithCardsSection {
  infoWithCards: {
    relationTo: 'globalInfoWithCards';
    value: string | GlobalInfoWithCard;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'globalInfoWithCardsSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoWithCards".
 */
export interface GlobalInfoWithCard {
  id: string;
  infoWithCards: InfoWithCards[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoWithCards".
 */
export interface InfoWithCards {
  featureBlock: InfoCard[];
  blocks?: InfoCard[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoWithCards';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoCard".
 */
export interface InfoCard {
  image: string | Asset;
  mobileImage?: (string | null) | Asset;
  title: string;
  subtitle: string;
  textLink: TextLinkButton[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoCard';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalReviewsSection".
 */
export interface GlobalReviewsSection {
  reviewBlock: {
    relationTo: 'globalReviews';
    value: string | GlobalReview;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'globalReviewsSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "grid".
 */
export interface Grid {
  items?: RichText[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'grid';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "richText".
 */
export interface RichText {
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'richText';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guidesBody".
 */
export interface GuidesBody {
  id?: string | null;
  blockName?: string | null;
  blockType: 'guidesBody';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "heroArticle".
 */
export interface HeroArticle {
  title: string;
  subtitle: string;
  cover: string | Asset;
  showGlobalTags?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroArticle';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "heroSubpages".
 */
export interface HeroSubpages {
  title: string;
  button?: (Button | GlobalButtons)[] | null;
  iconButton?: IconButton[] | null;
  subtitle: string;
  backgroundColor:
    | 'bg-neutral-05'
    | 'bg-yellow-03'
    | 'bg-purple-04'
    | 'bg-yellow-04'
    | 'bg-green-04'
    | 'bg-neutral-06'
    | 'bg-blue-04'
    | 'bg-red-05'
    | 'bg-green-02'
    | 'bg-pink-05'
    | 'bg-pink-04';
  media?: (string | null) | Asset;
  customComponent?: LiveWebsiteTestingHero[] | null;
  caption?: string | null;
  rating?: {
    relationTo: 'rating';
    value: string | Rating;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroSubpages';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "iconButton".
 */
export interface IconButton {
  label: string;
  link: string;
  icon: string | Asset;
  iconPosition: 'right' | 'left';
  eventName?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'iconButton';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "heroSubpagesCentered".
 */
export interface HeroSubpagesCentered {
  title: string;
  body: string;
  backgroundColor:
    | 'bg-neutral-05'
    | 'bg-yellow-03'
    | 'bg-purple-04'
    | 'bg-yellow-04'
    | 'bg-green-04'
    | 'bg-neutral-06'
    | 'bg-blue-04'
    | 'bg-red-05'
    | 'bg-green-02'
    | 'bg-pink-05'
    | 'bg-pink-04'
    | 'bg-neutral-07';
  topLeftImage?: (string | null) | Asset;
  topLeftImageSize?: ('small' | 'large') | null;
  bottomRightImage?: (string | null) | Asset;
  topRightMobileImage?: (string | null) | Asset;
  bottomRightMobileImage?: (string | null) | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroSubpagesCentered';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "heroTemplate".
 */
export interface HeroTemplate {
  title: string;
  subtitle: string;
  cover?: (string | null) | Asset;
  button?: (Button | GlobalButtons)[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'heroTemplate';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "homeHero".
 */
export interface HomeHero {
  richTitle?: (RichTitleSegment | RichTitleGradientSegment)[] | null;
  subtitle: string;
  button?: (Button | GlobalButtons)[] | null;
  caption?: string | null;
  rating?: {
    relationTo: 'rating';
    value: string | Rating;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'homeHero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoBottomTab".
 */
export interface InfoBottomTab {
  title: string;
  subtitle: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoBottomTab';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoGridWithHeading".
 */
export interface InfoGridWithHeading {
  heading: {
    title: string;
    icon: string | Asset;
    backgroundColor: 'bg-yellow-03' | 'bg-pink-04' | 'bg-purple-04' | 'bg-blue-04';
  };
  bottomLineSeperator?: boolean | null;
  cardsBlock: {
    cardTag: string;
    cardButtonLabel: string;
  };
  contentType: 'articles' | 'guides' | 'videos' | 'templates' | 'events' | 'reports';
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoGridWithHeading';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoGridWithResources".
 */
export interface InfoGridWithResources {
  /**
   * Maximum values - 3
   */
  resources: (
    | {
        relationTo: 'article';
        value: string | Article;
      }
    | {
        relationTo: 'template';
        value: string | Template;
      }
    | {
        relationTo: 'video';
        value: string | Video;
      }
    | {
        relationTo: 'guideMainInfo';
        value: string | GuideMainInfo;
      }
  )[];
  buttonLabel: string;
  guideLabel: string;
  articleLabel: string;
  videoLabel: string;
  templateLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoGridWithResources';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "article".
 */
export interface Article {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  lastUpdated?: string | null;
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  globalTag?:
    | {
        relationTo: 'globalTag';
        value: string | GlobalTag;
      }[]
    | null;
  category: {
    relationTo: 'articleCategory';
    value: string | ArticleCategory;
  };
  author: {
    relationTo: 'author';
    value: string | Author;
  };
  heroArticle: HeroArticle[];
  blocks?:
    | (
        | ArticleBody
        | TextBlock
        | SuggestedArticles
        | GlobalClientLogotypes
        | GlobalCTA
        | Cta
        | CtaForm
        | CtaSmall
        | ClientLogotypes
        | AuthorBioBox
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "articleCategory".
 */
export interface ArticleCategory {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "textBlock".
 */
export interface TextBlock {
  title: string;
  subtitle?: string | null;
  backgroundColor?: ('bg-yellow-04' | 'bg-neutral-07') | null;
  mobileCenter?: boolean | null;
  version: 'center' | 'left' | 'left-margin';
  /**
   * You need add the same value which you add to button field
   */
  refForScrollTo?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "suggestedArticles".
 */
export interface SuggestedArticles {
  buttonLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'suggestedArticles';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "template".
 */
export interface Template {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  'Template ID': string;
  globalTag?:
    | {
        relationTo: 'globalTag';
        value: string | GlobalTag;
      }[]
    | null;
  useCase: {
    relationTo: 'templateUseCase';
    value: string | TemplateUseCase;
  }[];
  team: {
    relationTo: 'templateTeam';
    value: string | TemplateTeam;
  }[];
  methodology: {
    relationTo: 'templateMethodology';
    value: string | TemplateMethodology;
  }[];
  industry?:
    | {
        relationTo: 'templateIndustry';
        value: string | TemplateIndustry;
      }[]
    | null;
  heroTemplate: HeroTemplate[];
  blocks?:
    | (
        | HeroTemplate
        | TextBlock
        | SuggestedTemplates
        | TemplateSection
        | SingleReview
        | GlobalClientLogotypes
        | GlobalCTA
        | CtaForm
        | Cta
        | CtaSmall
        | GlobalReviewsSection
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateUseCase".
 */
export interface TemplateUseCase {
  id: string;
  name: string;
  SEO?: {
    description?: string | null;
    followAndIndex?: boolean | null;
    title?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateTeam".
 */
export interface TemplateTeam {
  id: string;
  name: string;
  SEO?: {
    description?: string | null;
    followAndIndex?: boolean | null;
    title?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateMethodology".
 */
export interface TemplateMethodology {
  id: string;
  name: string;
  SEO?: {
    description?: string | null;
    followAndIndex?: boolean | null;
    title?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateIndustry".
 */
export interface TemplateIndustry {
  id: string;
  name: string;
  SEO?: {
    description?: string | null;
    followAndIndex?: boolean | null;
    title?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "suggestedTemplates".
 */
export interface SuggestedTemplates {
  buttonLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'suggestedTemplates';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateSection".
 */
export interface TemplateSection {
  sideBar: (TemplateCTA | GlobalCTA)[];
  templateBody: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'templateSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "video".
 */
export interface Video {
  id: string;
  'S E O': {
    description?: string | null;
    title: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  cover: string | Asset;
  globalTag?:
    | {
        relationTo: 'globalTag';
        value: string | GlobalTag;
      }[]
    | null;
  heroTemplate: HeroTemplate[];
  /**
   * You can pass here any embedded code to a video. You don't need to change only url in field.
   */
  embedVideo: string;
  durationMinutes?: number | null;
  /**
   * This is not total seconds. It's the seconds in addition to the minutes, e.g. 5 minutes and 40 seconds.
   */
  durationSeconds?: number | null;
  transcript: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  shareTitle: string;
  copiedTitle: string;
  shareFacebook?: boolean | null;
  shareTwitter?: boolean | null;
  shareLinkedin?: boolean | null;
  shareEmail?: boolean | null;
  copyLink?: boolean | null;
  'Call To Action': GlobalCTA[];
  clientLogoTypes: GlobalClientLogotypes[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guideMainInfo".
 */
export interface GuideMainInfo {
  id: string;
  'Guide Title': string;
  'Guide Body': string;
  linkToFirstPage: string;
  /**
   * Text will be used for the button, which is used in the guides list.
   */
  buttonText: string;
  /**
   * Text will be used for the sidebar table of content.
   */
  'Share Title': string;
  copiedTitle: string;
  /**
   * Text will be used for the guide pagination.
   */
  previousPageTitle: string;
  /**
   * Text will be used for the guide pagination.
   */
  nextPageTitle: string;
  /**
   * Text will be used for the guide pagination.
   */
  finishTitle: string;
  /**
   * Text will be used for the sidebar progress percentage.
   */
  completeTitle: string;
  globalTag?:
    | {
        relationTo: 'globalTag';
        value: string | GlobalTag;
      }[]
    | null;
  Cover: string | Asset;
  shareLinkedin?: boolean | null;
  shareFacebook?: boolean | null;
  shareEmail?: boolean | null;
  shareTwitter?: boolean | null;
  copyLink?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoQuote".
 */
export interface InfoQuote {
  title: string;
  image?: (string | null) | Asset;
  ''?: {
    relationTo: 'testimonial-reviewer';
    value: string | TestimonialReviewer;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoQuote';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoSlide".
 */
export interface InfoSlide {
  cover: string | Asset;
  title: string;
  subtitle: string;
  label?: string | null;
  link?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoSlide';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoSlider".
 */
export interface InfoSlider {
  /**
   * Defaults to bg-neutral-07
   */
  backgroundColour?: ('bg-neutral-07' | 'bg-yellow-04') | null;
  link?: string | null;
  linkLabel?: string | null;
  slides?: InfoSlide[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoSlider';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoSliderTimeline".
 */
export interface InfoSliderTimeline {
  slides: TimelineSlide[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoSliderTimeline';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "timelineSlide".
 */
export interface TimelineSlide {
  title: string;
  subtitle: string;
  image: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'timelineSlide';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoTextWithCollage".
 */
export interface InfoTextWithCollage {
  title: string;
  subtitle: string;
  leftGraphic: string | Asset;
  topGraphic: string | Asset;
  bottomGraphic: string | Asset;
  mainPhoto: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoTextWithCollage';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "infoTip".
 */
export interface InfoTip {
  body: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  backgroundColor:
    | 'bg-neutral-05'
    | 'bg-yellow-03'
    | 'bg-blue-04'
    | 'bg-green-02'
    | 'bg-pink-04'
    | 'bg-pink-05'
    | 'bg-yellow-04';
  icon: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'infoTip';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "insightComparison".
 */
export interface InsightComparison {
  id?: string | null;
  blockName?: string | null;
  blockType: 'insightComparison';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationsBody".
 */
export interface IntegrationsBody {
  buttonLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'integrationsBody';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "liveEvent".
 */
export interface LiveEvent {
  id?: string | null;
  blockName?: string | null;
  blockType: 'liveEvent';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "livestormEmbed".
 */
export interface LivestormEmbed {
  title?: string | null;
  'Embed HTML': string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'livestormEmbed';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mainHero".
 */
export interface MainHero {
  title: string;
  subtitle: string;
  button?: (Button | GlobalButtons)[] | null;
  caption?: string | null;
  rating?: {
    relationTo: 'rating';
    value: string | Rating;
  } | null;
  mobileImage?: (string | null) | Asset;
  lottieAnimation: {
    /**
     * Lottie JSON file or image
     */
    leftPart: string | Asset;
    /**
     * Lottie JSON file or image
     */
    rightPart: string | Asset;
  };
  banner?: {
    bannerBody?: string | null;
    bannerLabel?: string | null;
    bannerLink?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'mainHero';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  /**
   * Generic embeds have more priority than YouTube embeds and video fields.
   */
  embed?: string | null;
  /**
   * YouTube embeds have more priority than video fields.
   */
  'YouTube Embed'?: string | null;
  assetDesktop?: (string | null) | Asset;
  assetMobile?: (string | null) | Asset;
  size: 'parallax' | '780' | '885';
  id?: string | null;
  blockName?: string | null;
  blockType: 'media';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "mediaCollage".
 */
export interface MediaCollage {
  /**
   * You need to select 3 images.
   */
  firstLine: (string | Asset)[];
  /**
   * You need to select 5 images.
   */
  secondLine: (string | Asset)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaCollage';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "platform".
 */
export interface Platform {
  title: string;
  subtitle: string;
  link: string;
  image?: (string | null) | Asset;
  imageSm: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'platform';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingBodyTable".
 */
export interface PricingBodyTable {
  title: string;
  tableRows: PricingBodyTableRow[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricingBodyTable';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingBodyTableRow".
 */
export interface PricingBodyTableRow {
  cells: (PricingBodyTableTextCell | PricingBodyTableIconCell)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricingBodyTableRow';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingBodyTableTextCell".
 */
export interface PricingBodyTableTextCell {
  label: string;
  tooltip?: {
    tooltipImage?: (string | null) | Asset;
    tooltipBody?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricingBodyTableTextCell';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingBodyTableIconCell".
 */
export interface PricingBodyTableIconCell {
  availableIcon?: boolean | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricingBodyTableIconCell';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingPlan".
 */
export interface PricingPlan {
  name: string;
  monthlyPrice: string;
  monthlyPriceLabel?: string | null;
  'Annual Price': string;
  'Annual Price Label'?: string | null;
  button: (Button | GlobalButtons)[];
  caption?: string | null;
  body: string;
  items: PricingPlanItem[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricingPlan';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingPlanItem".
 */
export interface PricingPlanItem {
  title: string;
  list: PricingPlanListItem[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricingPlanItem';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingPlanListItem".
 */
export interface PricingPlanListItem {
  label: string;
  additionalLabel?: string | null;
  tooltip?: {
    tooltipImage?: (string | null) | Asset;
    tooltipBody?: string | null;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricingPlanListItem';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingTable".
 */
export interface PricingTable {
  plans: PricingPlan[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricingTable';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingTableComparison".
 */
export interface PricingTableComparison {
  mobileDropdownTitle: string;
  featureRow: PricingOmparisonFeaturesRow[];
  bodyTables: PricingBodyTable[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricingTableComparison';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricing–°omparisonFeaturesRow".
 */
export interface PricingOmparisonFeaturesRow {
  title: string;
  comparisonFeatures: ComparisonFeatureRow[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'pricing–°omparisonFeaturesRow';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reportsBody".
 */
export interface ReportsBody {
  id?: string | null;
  blockName?: string | null;
  blockType: 'reportsBody';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "sideBarCtaBlock".
 */
export interface SideBarCtaBlock {
  blocks?: GlobalCTA[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'sideBarCtaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "table".
 */
export interface Table {
  /**
   * This field displays as a table editor. Since Payload v3.47 doesn't include a dedicated table field type, we've configured a rich text field to only allow table content as a workaround. To create the table you will need to type "/table" in the editor.
   */
  tableData?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'table';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tableRichText".
 */
export interface TableRichText {
  tableRows?: TableRichTextRow[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'tableRichText';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tableRichTextRow".
 */
export interface TableRichTextRow {
  tableRichTextCell?: TableRichTextCell[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'tableRichTextRow';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tableRichTextCell".
 */
export interface TableRichTextCell {
  body: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'tableRichTextCell';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateInfoAccordion".
 */
export interface TemplateInfoAccordion {
  items: AccordionItem[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'templateInfoAccordion';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateInfoGridColumn".
 */
export interface TemplateInfoGridColumn {
  icon: string | Asset;
  title: string;
  body: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'templateInfoGridColumn';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateInfoGridThreeColumns".
 */
export interface TemplateInfoGridThreeColumns {
  columns: TemplateInfoGridColumn[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'templateInfoGridThreeColumns';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateMedia".
 */
export interface TemplateMedia {
  media?: (string | null) | Asset;
  mediaLink?: string | null;
  mediaLinkLabel?: string | null;
  embeded?: string | null;
  caption?: string | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'templateMedia';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templatesBody".
 */
export interface TemplatesBody {
  buttonLabel: string;
  emptyListTitle: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'templatesBody';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templatesFilterBar".
 */
export interface TemplatesFilterBar {
  searchInputPlaceholder: string;
  allButtonLabel: string;
  filterTeamTitle: string;
  filterUseCaseTitle: string;
  filterMethodologyTitle: string;
  filterIndustryTitle: string;
  mobileFilterButtonLabel: string;
  clearButtonLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'templatesFilterBar';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templatesSection".
 */
export interface TemplatesSection {
  leftBlocks: (TemplatesCTA | TemplatesFilterBar | GlobalCTA)[];
  rightBlock: (TemplatesBody | Pagination | IntegrationsBody)[];
  id?: string | null;
  blockName?: string | null;
  blockType: 'templatesSection';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "textLink".
 */
export interface TextLink {
  body: string;
  link: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textLink';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "textLinks".
 */
export interface TextLinks {
  links?: TextLinkWithIcon[] | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textLinks';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "textLinkWithIcon".
 */
export interface TextLinkWithIcon {
  label: string;
  hoverColor: 'bg-yellow-03' | 'bg-pink-04' | 'bg-purple-04' | 'bg-blue-04' | 'bg-red-04';
  link?: string | null;
  /**
   * If the field is empty, the button will be navigated by a provided link in another field. The page will scroll to \"Info Grid With Heading\" with the same content type by button press.
   */
  contentType?: ('articles' | 'videos' | 'guides' | 'templates' | 'events' | 'reports') | null;
  icon: string | Asset;
  id?: string | null;
  blockName?: string | null;
  blockType: 'textLinkWithIcon';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "toggle".
 */
export interface Toggle {
  activeLabel: string;
  inactiveLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'toggle';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videosBody".
 */
export interface VideosBody {
  buttonLabel: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'videosBody';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "compare".
 */
export interface Compare {
  id: string;
  'S E O': {
    followAndIndex?: boolean | null;
    title: string;
    description?: string | null;
  };
  ogImage?: OgImage[] | null;
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  heroTitle: string;
  heroBody: string;
  /**
   * CTA buttons shown in hero section
   */
  buttons?: (Button | GlobalButtons)[] | null;
  cover: string | Asset;
  body: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  blocks?: (InfoAccordion | RichText)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customer".
 */
export interface Customer {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  customerInfo: {
    /**
     * This field will be show at customers list page and customer page hero.
     */
    customerTitle: string;
    /**
     * This field will be show at customers list page and customer page hero.
     */
    customerBody: string;
    /**
     * This field will be show at customers list page.
     */
    cover: string | Asset;
  };
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  globalTag?:
    | {
        relationTo: 'globalTag';
        value: string | GlobalTag;
      }[]
    | null;
  useCase: {
    relationTo: 'customerUseCase';
    value: string | CustomerUseCase;
  };
  companySize: {
    relationTo: 'customerCompanySize';
    value: string | CustomerCompanySize;
  };
  customerRegion?: {
    relationTo: 'customerRegion';
    value: string | CustomerRegion;
  } | null;
  customerIndustry: {
    relationTo: 'customerIndustry';
    value: string | CustomerIndustry;
  };
  summary: {
    summaryTitle: string;
    summaryBody: string;
  };
  body: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  blocks: (
    | Appreciation
    | Banner
    | BookDemoMain
    | ClientLogotypes
    | ClientLogotypesCards
    | Cta
    | CtaForm
    | CtaSmall
    | CustomComponent
    | Demos
    | Embedded
    | EmbededMap
    | Features
    | Form
    | GlobalClientLogotypes
    | GlobalCTA
    | GlobalInfoAccordion
    | GlobalInfoCarousel
    | GlobalInfoGrid
    | GlobalInfoTabVariant
    | GlobalInfoTextWithImage
    | GlobalInfoWithCardsSection
    | GlobalReviewsSection
    | HeroSubpages
    | HeroSubpagesCentered
    | HomeHero
    | InfoAccordion
    | InfoCarousel
    | InfoGrid
    | InfoGridCardsWithIcons
    | InfoGridTwoColumnsWithTitle
    | InfoGridWithHeading
    | InfoGridWithResources
    | InfoSlider
    | InfoSliderTimeline
    | InfoTabsWithDescriptions
    | InfoTabsWithIcon
    | InfoTextWithCollage
    | InfoTextWithImage
    | InfoWithCards
    | InsightComparison
    | MainHero
    | Media
    | MediaCollage
    | Pagination
    | PricingTable
    | PricingTableComparison
    | ResourcesHero
    | Reviews
    | SingleReview
    | TextBlock
    | TextLinks
    | Toggle
  )[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customerUseCase".
 */
export interface CustomerUseCase {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customerCompanySize".
 */
export interface CustomerCompanySize {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customerRegion".
 */
export interface CustomerRegion {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customerIndustry".
 */
export interface CustomerIndustry {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customersMainPage".
 */
export interface CustomersMainPage {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks: (
    | Appreciation
    | Banner
    | BookDemoMain
    | ClientLogotypes
    | ClientLogotypesCards
    | Cta
    | CtaForm
    | CtaSmall
    | CustomComponent
    | Demos
    | Embedded
    | EmbededMap
    | Features
    | Form
    | GlobalClientLogotypes
    | GlobalCTA
    | GlobalInfoAccordion
    | GlobalInfoCarousel
    | GlobalInfoGrid
    | GlobalInfoTabVariant
    | GlobalInfoTextWithImage
    | GlobalInfoWithCardsSection
    | GlobalReviewsSection
    | HeroSubpages
    | HeroSubpagesCentered
    | HomeHero
    | InfoAccordion
    | InfoCarousel
    | InfoGrid
    | InfoGridCardsWithIcons
    | InfoGridTwoColumnsWithTitle
    | InfoGridWithHeading
    | InfoGridWithResources
    | InfoSlider
    | InfoSliderTimeline
    | InfoTabsWithDescriptions
    | InfoTabsWithIcon
    | InfoTextWithCollage
    | InfoTextWithImage
    | InfoWithCards
    | InsightComparison
    | MainHero
    | Media
    | MediaCollage
    | Pagination
    | PricingTable
    | PricingTableComparison
    | ResourcesHero
    | Reviews
    | SingleReview
    | TextBlock
    | TextLinks
    | Toggle
    | CustomersBody
    | CustomersSection
    | CustomersSideBar
  )[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event".
 */
export interface Event {
  id: string;
  'S E O': {
    followAndIndex?: boolean | null;
    title: string;
    description?: string | null;
  };
  date: string;
  ogImage?: OgImage[] | null;
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  cover: string | Asset;
  globalTag?:
    | {
        relationTo: 'globalTag';
        value: string | GlobalTag;
      }[]
    | null;
  livestormEmbed: string;
  blocks?:
    | (
        | ArticleBody
        | TextBlock
        | SuggestedArticles
        | GlobalClientLogotypes
        | GlobalCTA
        | Cta
        | CtaForm
        | CtaSmall
        | ClientLogotypes
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "feature".
 */
export interface Feature {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks?:
    | (
        | Appreciation
        | Banner
        | BookDemoMain
        | ClientLogotypes
        | ClientLogotypesCards
        | Cta
        | CtaForm
        | CtaSmall
        | CustomComponent
        | Demos
        | Embedded
        | EmbededMap
        | Features
        | Form
        | GlobalClientLogotypes
        | GlobalCTA
        | GlobalInfoAccordion
        | GlobalInfoCarousel
        | GlobalInfoGrid
        | GlobalInfoTabVariant
        | GlobalInfoTextWithImage
        | GlobalInfoWithCardsSection
        | GlobalReviewsSection
        | HeroSubpages
        | HeroSubpagesCentered
        | HomeHero
        | InfoAccordion
        | InfoCarousel
        | InfoGrid
        | InfoGridCardsWithIcons
        | InfoGridTwoColumnsWithTitle
        | InfoGridWithHeading
        | InfoGridWithResources
        | InfoSlider
        | InfoSliderTimeline
        | InfoTabsWithDescriptions
        | InfoTabsWithIcon
        | InfoTextWithCollage
        | InfoTextWithImage
        | InfoWithCards
        | InsightComparison
        | MainHero
        | Media
        | MediaCollage
        | Pagination
        | PricingTable
        | PricingTableComparison
        | ResourcesHero
        | Reviews
        | SingleReview
        | TextBlock
        | TextLinks
        | Toggle
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guide".
 */
export interface Guide {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * For SEO optimization, page with position 1 must have default slug
   */
  position: number;
  heroTitle: string;
  heroBody: string;
  body: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integration".
 */
export interface Integration {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  heroTitle: string;
  heroBody: string;
  /**
   * CTA button shown in hero section
   */
  Button?: (Button | GlobalButtons)[] | null;
  buttonSubtext?: string | null;
  cover?: (string | null) | Asset;
  sideBar: TableOfContent[];
  body: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationMainInfo".
 */
export interface IntegrationMainInfo {
  id: string;
  'Guide Title': string;
  'Guide Body': string;
  linkToFirstPage: string;
  /**
   * Text will be used for the button, which is used in the guides list.
   */
  buttonText: string;
  /**
   * Text will be used for the sidebar table of content.
   */
  'Share Title': string;
  copiedTitle: string;
  /**
   * Text will be used for the guide pagination.
   */
  previousPageTitle: string;
  /**
   * Text will be used for the guide pagination.
   */
  nextPageTitle: string;
  /**
   * Text will be used for the guide pagination.
   */
  finishTitle: string;
  /**
   * Text will be used for the sidebar progress percentage.
   */
  completeTitle: string;
  globalTag?:
    | {
        relationTo: 'globalTag';
        value: string | GlobalTag;
      }[]
    | null;
  Cover: string | Asset;
  shareLinkedin?: boolean | null;
  shareFacebook?: boolean | null;
  shareEmail?: boolean | null;
  shareTwitter?: boolean | null;
  copyLink?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "landingPage".
 */
export interface LandingPage {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  body: (
    | Appreciation
    | Banner
    | BookDemoMain
    | ClientLogotypes
    | ClientLogotypesCards
    | Cta
    | CtaForm
    | CtaSmall
    | CustomComponent
    | Demos
    | Embedded
    | EmbededMap
    | Features
    | Form
    | GlobalClientLogotypes
    | GlobalCTA
    | GlobalInfoAccordion
    | GlobalInfoCarousel
    | GlobalInfoGrid
    | GlobalInfoTabVariant
    | GlobalInfoTextWithImage
    | GlobalInfoWithCardsSection
    | GlobalReviewsSection
    | HeroSubpages
    | HeroSubpagesCentered
    | HomeHero
    | InfoAccordion
    | InfoCarousel
    | InfoGrid
    | InfoGridCardsWithIcons
    | InfoGridTwoColumnsWithTitle
    | InfoGridWithHeading
    | InfoGridWithResources
    | InfoSlider
    | InfoSliderTimeline
    | InfoTabsWithDescriptions
    | InfoTabsWithIcon
    | InfoTextWithCollage
    | InfoTextWithImage
    | InfoWithCards
    | InsightComparison
    | MainHero
    | Media
    | MediaCollage
    | Pagination
    | PricingTable
    | PricingTableComparison
    | ResourcesHero
    | Reviews
    | SingleReview
    | TextBlock
    | TextLinks
    | Toggle
  )[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "legalPage".
 */
export interface LegalPage {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  headerTitle?: string | null;
  headerBody?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  body: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page".
 */
export interface Page {
  id: string;
  'S E O': {
    Title: string;
    Description: string;
    followAndIndex?: boolean | null;
  };
  Title: string;
  Description: string;
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  body: (
    | Appreciation
    | Banner
    | BookDemoMain
    | ClientLogotypes
    | ClientLogotypesCards
    | Cta
    | CtaForm
    | CtaSmall
    | CustomComponent
    | Demos
    | Embedded
    | EmbededMap
    | Features
    | Form
    | GlobalClientLogotypes
    | GlobalCTA
    | GlobalInfoAccordion
    | GlobalInfoCarousel
    | GlobalInfoGrid
    | GlobalInfoTabVariant
    | GlobalInfoTextWithImage
    | GlobalInfoWithCardsSection
    | GlobalReviewsSection
    | HeroSubpages
    | HeroSubpagesCentered
    | HomeHero
    | InfoAccordion
    | InfoCarousel
    | InfoGrid
    | InfoGridCardsWithIcons
    | InfoGridTwoColumnsWithTitle
    | InfoGridWithHeading
    | InfoGridWithResources
    | InfoSlider
    | InfoSliderTimeline
    | InfoTabsWithDescriptions
    | InfoTabsWithIcon
    | InfoTextWithCollage
    | InfoTextWithImage
    | InfoWithCards
    | InsightComparison
    | MainHero
    | Media
    | MediaCollage
    | Pagination
    | PricingTable
    | PricingTableComparison
    | ResourcesHero
    | Reviews
    | SingleReview
    | TextBlock
    | TextLinks
    | Toggle
  )[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingUseCase".
 */
export interface PricingUseCase {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks: (
    | Appreciation
    | Banner
    | BookDemoMain
    | ClientLogotypes
    | ClientLogotypesCards
    | Cta
    | CtaForm
    | CtaSmall
    | CustomComponent
    | Demos
    | Embedded
    | EmbededMap
    | Features
    | Form
    | GlobalClientLogotypes
    | GlobalCTA
    | GlobalInfoAccordion
    | GlobalInfoCarousel
    | GlobalInfoGrid
    | GlobalInfoTabVariant
    | GlobalInfoTextWithImage
    | GlobalInfoWithCardsSection
    | GlobalReviewsSection
    | HeroSubpages
    | HeroSubpagesCentered
    | HomeHero
    | InfoAccordion
    | InfoCarousel
    | InfoGrid
    | InfoGridCardsWithIcons
    | InfoGridTwoColumnsWithTitle
    | InfoGridWithHeading
    | InfoGridWithResources
    | InfoSlider
    | InfoSliderTimeline
    | InfoTabsWithDescriptions
    | InfoTabsWithIcon
    | InfoTextWithCollage
    | InfoTextWithImage
    | InfoWithCards
    | InsightComparison
    | MainHero
    | Media
    | MediaCollage
    | Pagination
    | PricingTable
    | PricingTableComparison
    | ResourcesHero
    | Reviews
    | SingleReview
    | TextBlock
    | TextLinks
    | Toggle
  )[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "report".
 */
export interface Report {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  lastUpdated?: string | null;
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  author: {
    relationTo: 'author';
    value: string | Author;
  };
  heroArticle: HeroArticle[];
  blocks?:
    | (
        | ArticleBody
        | TextBlock
        | SuggestedArticles
        | GlobalClientLogotypes
        | GlobalCTA
        | Cta
        | CtaForm
        | CtaSmall
        | ClientLogotypes
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solution".
 */
export interface Solution {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks?:
    | (
        | Appreciation
        | Banner
        | BookDemoMain
        | ClientLogotypes
        | ClientLogotypesCards
        | Cta
        | CtaForm
        | CtaSmall
        | CustomComponent
        | Demos
        | Embedded
        | EmbededMap
        | Features
        | Form
        | GlobalClientLogotypes
        | GlobalCTA
        | GlobalInfoAccordion
        | GlobalInfoCarousel
        | GlobalInfoGrid
        | GlobalInfoTabVariant
        | GlobalInfoTextWithImage
        | GlobalInfoWithCardsSection
        | GlobalReviewsSection
        | HeroSubpages
        | HeroSubpagesCentered
        | HomeHero
        | InfoAccordion
        | InfoCarousel
        | InfoGrid
        | InfoGridCardsWithIcons
        | InfoGridTwoColumnsWithTitle
        | InfoGridWithHeading
        | InfoGridWithResources
        | InfoSlider
        | InfoSliderTimeline
        | InfoTabsWithDescriptions
        | InfoTabsWithIcon
        | InfoTextWithCollage
        | InfoTextWithImage
        | InfoWithCards
        | InsightComparison
        | MainHero
        | Media
        | MediaCollage
        | Pagination
        | PricingTable
        | PricingTableComparison
        | ResourcesHero
        | Reviews
        | SingleReview
        | TextBlock
        | TextLinks
        | Toggle
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  sessions?:
    | {
        id: string;
        createdAt?: string | null;
        expiresAt: string;
      }[]
    | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "test-pages".
 */
export interface TestPage {
  id: string;
  title: string;
  slug: string;
  /**
   * Optionally assign this page to a release. Releases allow you to schedule the publishing of pages in bulk
   */
  release?: {
    docs?: (string | Release)[];
    hasNextPage?: boolean;
    totalDocs?: number;
  };
  content?:
    | (
        | {
            heading?: string | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'Heading';
          }
        | {
            richText?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'Rich Text';
          }
      )[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "releases".
 */
export interface Release {
  id: string;
  name: string;
  /**
   * Once selected, all published content will be deployed on the given date and time. Leave empty if you don't want this release to deploy automatically.
   */
  releaseDateAndTime?: string | null;
  releaseDateAndTime_tz?: SupportedTimezones;
  /**
   * Select documents to publish before this release. If you just want to release already published content, leave this empty. An error will occur if you try to add a document to multiple releases.
   */
  documentsToPublish?: (string | TestPage)[] | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: string;
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?: {
      relationTo: 'test-pages';
      value: string | TestPage;
    } | null;
    url?: string | null;
  };
  type: '307' | '308';
  updatedAt: string;
  createdAt: string;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: string;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'test-pages';
    value: string | TestPage;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'article';
        value: string | Article;
      } | null)
    | ({
        relationTo: 'articleCategory';
        value: string | ArticleCategory;
      } | null)
    | ({
        relationTo: 'author';
        value: string | Author;
      } | null)
    | ({
        relationTo: 'callToAction';
        value: string | CallToAction;
      } | null)
    | ({
        relationTo: 'clientLogotype';
        value: string | ClientLogotype;
      } | null)
    | ({
        relationTo: 'compare';
        value: string | Compare;
      } | null)
    | ({
        relationTo: 'customer';
        value: string | Customer;
      } | null)
    | ({
        relationTo: 'customerCompanySize';
        value: string | CustomerCompanySize;
      } | null)
    | ({
        relationTo: 'customerIndustry';
        value: string | CustomerIndustry;
      } | null)
    | ({
        relationTo: 'customerRegion';
        value: string | CustomerRegion;
      } | null)
    | ({
        relationTo: 'customersMainPage';
        value: string | CustomersMainPage;
      } | null)
    | ({
        relationTo: 'customerUseCase';
        value: string | CustomerUseCase;
      } | null)
    | ({
        relationTo: 'event';
        value: string | Event;
      } | null)
    | ({
        relationTo: 'feature';
        value: string | Feature;
      } | null)
    | ({
        relationTo: 'footer';
        value: string | Footer;
      } | null)
    | ({
        relationTo: 'globalButton';
        value: string | GlobalButton;
      } | null)
    | ({
        relationTo: 'globalInfoAccordions';
        value: string | GlobalInfoAccordion1;
      } | null)
    | ({
        relationTo: 'globalInfoCarousels';
        value: string | GlobalInfoCarousel1;
      } | null)
    | ({
        relationTo: 'globalInfoGrids';
        value: string | GlobalInfoGrid1;
      } | null)
    | ({
        relationTo: 'globalInfoTabs';
        value: string | GlobalInfoTab;
      } | null)
    | ({
        relationTo: 'globalInfoTextWithImages';
        value: string | GlobalInfoTextWithImage1;
      } | null)
    | ({
        relationTo: 'globalInfoWithCards';
        value: string | GlobalInfoWithCard;
      } | null)
    | ({
        relationTo: 'globalReviews';
        value: string | GlobalReview;
      } | null)
    | ({
        relationTo: 'globalTag';
        value: string | GlobalTag;
      } | null)
    | ({
        relationTo: 'guide';
        value: string | Guide;
      } | null)
    | ({
        relationTo: 'guideMainInfo';
        value: string | GuideMainInfo;
      } | null)
    | ({
        relationTo: 'integration';
        value: string | Integration;
      } | null)
    | ({
        relationTo: 'integrationMainInfo';
        value: string | IntegrationMainInfo;
      } | null)
    | ({
        relationTo: 'landingPage';
        value: string | LandingPage;
      } | null)
    | ({
        relationTo: 'legalPage';
        value: string | LegalPage;
      } | null)
    | ({
        relationTo: 'navigationBar';
        value: string | NavigationBar;
      } | null)
    | ({
        relationTo: 'navigationBarMenuItems';
        value: string | NavigationBarMenuItem;
      } | null)
    | ({
        relationTo: 'page';
        value: string | Page;
      } | null)
    | ({
        relationTo: 'pricingUseCase';
        value: string | PricingUseCase;
      } | null)
    | ({
        relationTo: 'rating';
        value: string | Rating;
      } | null)
    | ({
        relationTo: 'report';
        value: string | Report;
      } | null)
    | ({
        relationTo: 'solution';
        value: string | Solution;
      } | null)
    | ({
        relationTo: 'template';
        value: string | Template;
      } | null)
    | ({
        relationTo: 'templateIndustry';
        value: string | TemplateIndustry;
      } | null)
    | ({
        relationTo: 'templateMethodology';
        value: string | TemplateMethodology;
      } | null)
    | ({
        relationTo: 'templateTeam';
        value: string | TemplateTeam;
      } | null)
    | ({
        relationTo: 'templateUseCase';
        value: string | TemplateUseCase;
      } | null)
    | ({
        relationTo: 'testimonial-reviewer';
        value: string | TestimonialReviewer;
      } | null)
    | ({
        relationTo: 'video';
        value: string | Video;
      } | null)
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'assets';
        value: string | Asset;
      } | null)
    | ({
        relationTo: 'test-pages';
        value: string | TestPage;
      } | null)
    | ({
        relationTo: 'releases';
        value: string | Release;
      } | null)
    | ({
        relationTo: 'redirects';
        value: string | Redirect;
      } | null)
    | ({
        relationTo: 'search';
        value: string | Search;
      } | null)
    | ({
        relationTo: 'payload-folders';
        value: string | FolderInterface;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "article_select".
 */
export interface ArticleSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  lastUpdated?: T;
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  globalTag?: T;
  category?: T;
  author?: T;
  heroArticle?: T | {};
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "articleCategory_select".
 */
export interface ArticleCategorySelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "author_select".
 */
export interface AuthorSelect<T extends boolean = true> {
  name?: T;
  position?: T;
  image?: T;
  description?: T;
  socialMediaLinks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "callToAction_select".
 */
export interface CallToActionSelect<T extends boolean = true> {
  block?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "clientLogotype_select".
 */
export interface ClientLogotypeSelect<T extends boolean = true> {
  clientLogotypes?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "compare_select".
 */
export interface CompareSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        followAndIndex?: T;
        title?: T;
        description?: T;
      };
  ogImage?: T | {};
  navigationBar?: T;
  footer?: T;
  heroTitle?: T;
  heroBody?: T;
  buttons?: T | {};
  cover?: T;
  body?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customer_select".
 */
export interface CustomerSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  customerInfo?:
    | T
    | {
        customerTitle?: T;
        customerBody?: T;
        cover?: T;
      };
  navigationBar?: T;
  footer?: T;
  globalTag?: T;
  useCase?: T;
  companySize?: T;
  customerRegion?: T;
  customerIndustry?: T;
  summary?:
    | T
    | {
        summaryTitle?: T;
        summaryBody?: T;
      };
  body?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customerCompanySize_select".
 */
export interface CustomerCompanySizeSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customerIndustry_select".
 */
export interface CustomerIndustrySelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customerRegion_select".
 */
export interface CustomerRegionSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customersMainPage_select".
 */
export interface CustomersMainPageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "customerUseCase_select".
 */
export interface CustomerUseCaseSelect<T extends boolean = true> {
  name?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event_select".
 */
export interface EventSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        followAndIndex?: T;
        title?: T;
        description?: T;
      };
  date?: T;
  ogImage?: T | {};
  navigationBar?: T;
  footer?: T;
  cover?: T;
  globalTag?: T;
  livestormEmbed?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "feature_select".
 */
export interface FeatureSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  logotype?: T;
  groups?: T | {};
  socialMedia?: T | {};
  imagePlaceholders?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalButton_select".
 */
export interface GlobalButtonSelect<T extends boolean = true> {
  button?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoAccordions_select".
 */
export interface GlobalInfoAccordionsSelect<T extends boolean = true> {
  infoAccordion?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoCarousels_select".
 */
export interface GlobalInfoCarouselsSelect<T extends boolean = true> {
  infoCarousel?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoGrids_select".
 */
export interface GlobalInfoGridsSelect<T extends boolean = true> {
  grid?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoTabs_select".
 */
export interface GlobalInfoTabsSelect<T extends boolean = true> {
  infoTabs?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoTextWithImages_select".
 */
export interface GlobalInfoTextWithImagesSelect<T extends boolean = true> {
  infoTextWithImage?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalInfoWithCards_select".
 */
export interface GlobalInfoWithCardsSelect<T extends boolean = true> {
  infoWithCards?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalReviews_select".
 */
export interface GlobalReviewsSelect<T extends boolean = true> {
  reviewBlock?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "globalTag_select".
 */
export interface GlobalTagSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  globalTagTitle?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guide_select".
 */
export interface GuideSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  position?: T;
  heroTitle?: T;
  heroBody?: T;
  body?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guideMainInfo_select".
 */
export interface GuideMainInfoSelect<T extends boolean = true> {
  'Guide Title'?: T;
  'Guide Body'?: T;
  linkToFirstPage?: T;
  buttonText?: T;
  'Share Title'?: T;
  copiedTitle?: T;
  previousPageTitle?: T;
  nextPageTitle?: T;
  finishTitle?: T;
  completeTitle?: T;
  globalTag?: T;
  Cover?: T;
  shareLinkedin?: T;
  shareFacebook?: T;
  shareEmail?: T;
  shareTwitter?: T;
  copyLink?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integration_select".
 */
export interface IntegrationSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  heroTitle?: T;
  heroBody?: T;
  Button?: T | {};
  buttonSubtext?: T;
  cover?: T;
  sideBar?: T | {};
  body?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationMainInfo_select".
 */
export interface IntegrationMainInfoSelect<T extends boolean = true> {
  'Guide Title'?: T;
  'Guide Body'?: T;
  linkToFirstPage?: T;
  buttonText?: T;
  'Share Title'?: T;
  copiedTitle?: T;
  previousPageTitle?: T;
  nextPageTitle?: T;
  finishTitle?: T;
  completeTitle?: T;
  globalTag?: T;
  Cover?: T;
  shareLinkedin?: T;
  shareFacebook?: T;
  shareEmail?: T;
  shareTwitter?: T;
  copyLink?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "landingPage_select".
 */
export interface LandingPageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  body?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "legalPage_select".
 */
export interface LegalPageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  headerTitle?: T;
  headerBody?: T;
  body?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigationBar_select".
 */
export interface NavigationBarSelect<T extends boolean = true> {
  backgroundColor?: T;
  buttons?: T | {};
  logotype?: T;
  searchHidden?: T;
  menuItems?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "navigationBarMenuItems_select".
 */
export interface NavigationBarMenuItemsSelect<T extends boolean = true> {
  logotypeLink?: T;
  logoButtonLabel?: T;
  logoButtonLink?: T;
  search?:
    | T
    | {
        searchResultsTitle?: T;
        emptySearchTitle?: T;
        searchLengthValidationTitle?: T;
        searchPlaceholder?: T;
        searchGlobalTagContentType?: T;
        searchFeatureContentType?: T;
        searchCustomerMainPageContentType?: T;
        searchCustomerContentType?: T;
        searchSolutionContentType?: T;
        searchPricingUseCaseContentType?: T;
        searchPricingMainPageContentType?: T;
        searchArticleContentType?: T;
        searchBlogMainPageContentType?: T;
        searchVideoContentType?: T;
        searchVideoMainPageContentType?: T;
        searchGuidesMainPageContentType?: T;
        searchGuideMainPageContentType?: T;
        searchTemplatesMainPageContentType?: T;
        searchTemplateContentType?: T;
        searchLegalPageContentType?: T;
        searchLandingPageContentType?: T;
        searchPageContentType?: T;
        searchGuideMainInfoContentType?: T;
      };
  'Menu Items'?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "page_select".
 */
export interface PageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        Title?: T;
        Description?: T;
        followAndIndex?: T;
      };
  Title?: T;
  Description?: T;
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  body?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingUseCase_select".
 */
export interface PricingUseCaseSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "rating_select".
 */
export interface RatingSelect<T extends boolean = true> {
  rating?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "report_select".
 */
export interface ReportSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  lastUpdated?: T;
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  author?: T;
  heroArticle?: T | {};
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "solution_select".
 */
export interface SolutionSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "template_select".
 */
export interface TemplateSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  'Template ID'?: T;
  globalTag?: T;
  useCase?: T;
  team?: T;
  methodology?: T;
  industry?: T;
  heroTemplate?: T | {};
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateIndustry_select".
 */
export interface TemplateIndustrySelect<T extends boolean = true> {
  name?: T;
  SEO?:
    | T
    | {
        description?: T;
        followAndIndex?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateMethodology_select".
 */
export interface TemplateMethodologySelect<T extends boolean = true> {
  name?: T;
  SEO?:
    | T
    | {
        description?: T;
        followAndIndex?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateTeam_select".
 */
export interface TemplateTeamSelect<T extends boolean = true> {
  name?: T;
  SEO?:
    | T
    | {
        description?: T;
        followAndIndex?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templateUseCase_select".
 */
export interface TemplateUseCaseSelect<T extends boolean = true> {
  name?: T;
  SEO?:
    | T
    | {
        description?: T;
        followAndIndex?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "testimonial-reviewer_select".
 */
export interface TestimonialReviewerSelect<T extends boolean = true> {
  fullName?: T;
  position?: T;
  companyLogo?: T;
  companyLogoOnLight?: T;
  avatar?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "video_select".
 */
export interface VideoSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        description?: T;
        title?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  cover?: T;
  globalTag?: T;
  heroTemplate?: T | {};
  embedVideo?: T;
  durationMinutes?: T;
  durationSeconds?: T;
  transcript?: T;
  shareTitle?: T;
  copiedTitle?: T;
  shareFacebook?: T;
  shareTwitter?: T;
  shareLinkedin?: T;
  shareEmail?: T;
  copyLink?: T;
  'Call To Action'?: T | {};
  clientLogoTypes?: T | {};
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
  sessions?:
    | T
    | {
        id?: T;
        createdAt?: T;
        expiresAt?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assets_select".
 */
export interface AssetsSelect<T extends boolean = true> {
  alt?: T;
  folder?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "test-pages_select".
 */
export interface TestPagesSelect<T extends boolean = true> {
  title?: T;
  slug?: T;
  release?: T;
  content?:
    | T
    | {
        Heading?:
          | T
          | {
              heading?: T;
              id?: T;
              blockName?: T;
            };
        'Rich Text'?:
          | T
          | {
              richText?: T;
              id?: T;
              blockName?: T;
            };
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "releases_select".
 */
export interface ReleasesSelect<T extends boolean = true> {
  name?: T;
  releaseDateAndTime?: T;
  releaseDateAndTime_tz?: T;
  documentsToPublish?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  type?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-folders_select".
 */
export interface PayloadFoldersSelect<T extends boolean = true> {
  name?: T;
  folder?: T;
  documentsAndFolders?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogMainPage".
 */
export interface BlogMainPage {
  id: string;
  'S E O': {
    description: string;
    followAndIndex?: boolean | null;
    title: string;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks: (
    | ResourcesHero
    | FeatureArticle
    | FilterBar
    | ArticleBody
    | Pagination
    | GlobalClientLogotypes
    | GlobalCTA
    | Cta
    | CtaForm
    | CtaSmall
    | ClientLogotypes
  )[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "errorPage".
 */
export interface ErrorPage {
  id: string;
  SEO?: {
    title?: string | null;
    description?: string | null;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  hero: HeroSubpages[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "eventsMainPage".
 */
export interface EventsMainPage {
  id: string;
  'S E O': {
    followAndIndex?: boolean | null;
    title: string;
    description: string;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks: (
    | ResourcesHero
    | FeatureArticle
    | FilterBar
    | ArticleBody
    | Pagination
    | GlobalClientLogotypes
    | GlobalCTA
    | Cta
    | CtaForm
    | CtaSmall
    | ClientLogotypes
    | LivestormEmbed
    | EventsBody
  )[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "favicon".
 */
export interface Favicon {
  id: string;
  favicon: string | Asset;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guidesMainPage".
 */
export interface GuidesMainPage {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Imagee'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks: (
    | ResourcesHero
    | FeatureGuide
    | GuidesBody
    | Pagination
    | GlobalCTA
    | GlobalClientLogotypes
    | CtaForm
    | Cta
    | ClientLogotypes
    | CtaSmall
  )[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationsMainPage".
 */
export interface IntegrationsMainPage {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Imagee'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks: (
    | ResourcesHero
    | GlobalCTA
    | GlobalClientLogotypes
    | CtaForm
    | Cta
    | ClientLogotypes
    | CtaSmall
    | TemplatesSection
  )[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notFoundPage".
 */
export interface NotFoundPage {
  id: string;
  SEO?: {
    title?: string | null;
    description?: string | null;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  hero: HeroSubpages[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingMainPage".
 */
export interface PricingMainPage {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks: (
    | Appreciation
    | Banner
    | BookDemoMain
    | ClientLogotypes
    | ClientLogotypesCards
    | Cta
    | CtaForm
    | CtaSmall
    | CustomComponent
    | Demos
    | Embedded
    | EmbededMap
    | Features
    | Form
    | GlobalClientLogotypes
    | GlobalCTA
    | GlobalInfoAccordion
    | GlobalInfoCarousel
    | GlobalInfoGrid
    | GlobalInfoTabVariant
    | GlobalInfoTextWithImage
    | GlobalInfoWithCardsSection
    | GlobalReviewsSection
    | HeroSubpages
    | HeroSubpagesCentered
    | HomeHero
    | InfoAccordion
    | InfoCarousel
    | InfoGrid
    | InfoGridCardsWithIcons
    | InfoGridTwoColumnsWithTitle
    | InfoGridWithHeading
    | InfoGridWithResources
    | InfoSlider
    | InfoSliderTimeline
    | InfoTabsWithDescriptions
    | InfoTabsWithIcon
    | InfoTextWithCollage
    | InfoTextWithImage
    | InfoWithCards
    | InsightComparison
    | MainHero
    | Media
    | MediaCollage
    | Pagination
    | PricingTable
    | PricingTableComparison
    | ResourcesHero
    | Reviews
    | SingleReview
    | TextBlock
    | TextLinks
    | Toggle
  )[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reportsMainPage".
 */
export interface ReportsMainPage {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Imagee'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Footer.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks: (
    | ResourcesHero
    | FeatureGuide
    | GuidesBody
    | Pagination
    | GlobalCTA
    | GlobalClientLogotypes
    | CtaForm
    | Cta
    | ClientLogotypes
    | CtaSmall
    | ReportsBody
    | FeatureReport
  )[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templatesMainPage".
 */
export interface TemplatesMainPage {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks?:
    | (
        | ResourcesHero
        | TemplatesSection
        | GlobalClientLogotypes
        | GlobalCTA
        | Cta
        | ClientLogotypes
        | CtaForm
        | CtaSmall
      )[]
    | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videosMainPage".
 */
export interface VideosMainPage {
  id: string;
  'S E O': {
    title: string;
    description: string;
    followAndIndex?: boolean | null;
  };
  'OG Image'?: OgImage[] | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  navigationBar?: {
    relationTo: 'navigationBar';
    value: string | NavigationBar;
  } | null;
  /**
   * If field will be empty, page will be use default Navigation Bar.
   */
  footer?: {
    relationTo: 'footer';
    value: string | Footer;
  } | null;
  /**
   * Any hero block must be on first place.
   */
  blocks: (ResourcesHero | VideosBody | Pagination | GlobalClientLogotypes | GlobalCTA | CtaForm | Cta)[];
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings".
 */
export interface Setting {
  id: string;
  defaultTitle?: string | null;
  titleTemplate?: string | null;
  favicon?: (string | null) | Asset;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blogMainPage_select".
 */
export interface BlogMainPageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        description?: T;
        followAndIndex?: T;
        title?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "errorPage_select".
 */
export interface ErrorPageSelect<T extends boolean = true> {
  SEO?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  hero?: T | {};
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "eventsMainPage_select".
 */
export interface EventsMainPageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        followAndIndex?: T;
        title?: T;
        description?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "favicon_select".
 */
export interface FaviconSelect<T extends boolean = true> {
  favicon?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "guidesMainPage_select".
 */
export interface GuidesMainPageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Imagee'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "integrationsMainPage_select".
 */
export interface IntegrationsMainPageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Imagee'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "notFoundPage_select".
 */
export interface NotFoundPageSelect<T extends boolean = true> {
  SEO?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  hero?: T | {};
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pricingMainPage_select".
 */
export interface PricingMainPageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "reportsMainPage_select".
 */
export interface ReportsMainPageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Imagee'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "templatesMainPage_select".
 */
export interface TemplatesMainPageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "videosMainPage_select".
 */
export interface VideosMainPageSelect<T extends boolean = true> {
  'S E O'?:
    | T
    | {
        title?: T;
        description?: T;
        followAndIndex?: T;
      };
  'OG Image'?: T | {};
  navigationBar?: T;
  footer?: T;
  blocks?: T | {};
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "settings_select".
 */
export interface SettingsSelect<T extends boolean = true> {
  defaultTitle?: T;
  titleTemplate?: T;
  favicon?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}